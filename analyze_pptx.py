#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ PPTX —Ñ–∞–π–ª–∞
"""

import sys
from pathlib import Path
from pptx import Presentation
from pptx.enum.shapes import MSO_SHAPE_TYPE

def analyze_pptx(file_path: str) -> None:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ PPTX —Ñ–∞–π–ª–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    
    if not Path(file_path).exists():
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    try:
        prs = Presentation(file_path)
        print(f"üìä –ê–ù–ê–õ–ò–ó –ü–†–ï–ó–ï–ù–¢–ê–¶–ò–ò: {Path(file_path).name}")
        print("=" * 60)
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üìã –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤: {len(prs.slides)}")
        print(f"üìê –†–∞–∑–º–µ—Ä —Å–ª–∞–π–¥–∞: {prs.slide_width} x {prs.slide_height} EMU")
        print(f"üìè –†–∞–∑–º–µ—Ä –≤ –¥—é–π–º–∞—Ö: {prs.slide_width/914400:.2f}\" x {prs.slide_height/914400:.2f}\"")
        print()
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å–ª–∞–π–¥–∞
        for i, slide in enumerate(prs.slides, 1):
            print(f"üéØ –°–õ–ê–ô–î {i}:")
            print(f"   Layout: {slide.slide_layout.name}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(slide.shapes)}")
            
            # –ê–Ω–∞–ª–∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            title_found = False
            if hasattr(slide.shapes, 'title') and slide.shapes.title:
                if slide.shapes.title.has_text_frame and slide.shapes.title.text_frame.text.strip():
                    print(f"   üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: '{slide.shapes.title.text_frame.text.strip()}'")
                    title_found = True
            
            if not title_found:
                print(f"   ‚ö†Ô∏è  –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π")
            
            # –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            text_shapes = 0
            image_shapes = 0
            other_shapes = 0
            total_text_length = 0
            
            for shape in slide.shapes:
                if shape.has_text_frame:
                    text_shapes += 1
                    text_content = shape.text_frame.text.strip()
                    total_text_length += len(text_content)
                    if text_content and shape != slide.shapes.title:
                        print(f"   üìÑ –¢–µ–∫—Å—Ç ({len(text_content)} —Å–∏–º–≤–æ–ª–æ–≤): '{text_content[:100]}{'...' if len(text_content) > 100 else ''}'")
                        
                        # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤ –∏ –±—É–ª–ª–µ—Ç–æ–≤
                        for j, paragraph in enumerate(shape.text_frame.paragraphs):
                            if paragraph.text.strip():
                                level = paragraph.level
                                bullet_info = "—Å –±—É–ª–ª–µ—Ç–æ–º" if paragraph.level > 0 or (hasattr(paragraph, '_element') and paragraph._element.get('marL')) else "–±–µ–∑ –±—É–ª–ª–µ—Ç–∞"
                                print(f"     ‚Ä¢ –ü–∞—Ä–∞–≥—Ä–∞—Ñ {j+1} (—É—Ä–æ–≤–µ–Ω—å {level}, {bullet_info}): '{paragraph.text.strip()[:50]}{'...' if len(paragraph.text.strip()) > 50 else ''}'")
                
                elif shape.shape_type == MSO_SHAPE_TYPE.PICTURE:
                    image_shapes += 1
                    print(f"   üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {shape.width/914400:.2f}\" x {shape.height/914400:.2f}\"")
                else:
                    other_shapes += 1
            
            print(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {text_shapes} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤, {image_shapes} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, {other_shapes} –¥—Ä—É–≥–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤")
            print(f"   üìù –û–±—â–∏–π –æ–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞: {total_text_length} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–º–µ—Ç–æ–∫
            if slide.has_notes_slide and slide.notes_slide.notes_text_frame.text.strip():
                notes_text = slide.notes_slide.notes_text_frame.text.strip()
                print(f"   üìã –ó–∞–º–µ—Ç–∫–∏ ({len(notes_text)} —Å–∏–º–≤–æ–ª–æ–≤): '{notes_text[:100]}{'...' if len(notes_text) > 100 else ''}'")
            else:
                print(f"   ‚ö†Ô∏è  –ó–∞–º–µ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
            print()
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        print("üîç –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê:")
        print("=" * 30)
        
        issues = []
        
        if len(prs.slides) == 0:
            issues.append("‚ùå –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø—É—Å—Ç–∞—è")
        
        empty_slides = 0
        slides_without_title = 0
        slides_without_content = 0
        
        for slide in prs.slides:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            has_title = False
            if hasattr(slide.shapes, 'title') and slide.shapes.title:
                if slide.shapes.title.has_text_frame and slide.shapes.title.text_frame.text.strip():
                    has_title = True
            
            if not has_title:
                slides_without_title += 1
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            has_content = False
            for shape in slide.shapes:
                if shape.has_text_frame and shape != slide.shapes.title:
                    if shape.text_frame.text.strip():
                        has_content = True
                        break
                elif shape.shape_type == MSO_SHAPE_TYPE.PICTURE:
                    has_content = True
                    break
            
            if not has_content:
                slides_without_content += 1
            
            if not has_title and not has_content:
                empty_slides += 1
        
        if empty_slides > 0:
            issues.append(f"‚ùå {empty_slides} –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã—Ö —Å–ª–∞–π–¥–æ–≤")
        
        if slides_without_title > 0:
            issues.append(f"‚ö†Ô∏è  {slides_without_title} —Å–ª–∞–π–¥–æ–≤ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
        
        if slides_without_content > 0:
            issues.append(f"‚ö†Ô∏è  {slides_without_content} —Å–ª–∞–π–¥–æ–≤ –±–µ–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ")
        
        if not issues:
            print("‚úÖ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
            for issue in issues:
                print(f"   {issue}")
        
        print()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python analyze_pptx.py <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É.pptx>")
        sys.exit(1)
    
    analyze_pptx(sys.argv[1])