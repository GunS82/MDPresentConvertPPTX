#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–∞—Ä—Å–µ—Ä–∞ Markdown —Å –æ—á–∏—Å—Ç–∫–æ–π –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
"""

import re
from typing import List

from bs4 import BeautifulSoup
import markdown
import requests
from tempfile import NamedTemporaryFile
from pathlib import Path

from .models import SlideModel, TextBlock, ImageBlock

SEPARATOR = re.compile(r"^---$", re.MULTILINE)

def clean_title(title: str) -> str:
    """–û—á–∏—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    if not title:
        return title
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã —Ç–∏–ø–∞ "**–°–ª–∞–π–¥ X:"
    title = re.sub(r'^\*\*–°–ª–∞–π–¥\s+\d+:\s*', '', title)
    title = re.sub(r'^–°–ª–∞–π–¥\s+\d+:\s*', '', title)
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã
    title = re.sub(r'^\*+\s*', '', title)
    title = re.sub(r'\s*\*+$', '', title)
    
    # –£–¥–∞–ª—è–µ–º –¥–≤–æ–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    title = re.sub(r'\s+', ' ', title)
    
    return title.strip()

def clean_text(text: str) -> str:
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–µ–π –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    if not text:
        return text
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º—Ç—ã –¥–ª—è AI
    text = re.sub(r'\(–ü—Ä–æ–º—Ç –¥–ª—è AI:.*?\)', '', text, flags=re.DOTALL)
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
    text = re.sub(r'\s+', ' ', text)
    
    return text.strip()

def extract_title_from_content(content: str) -> tuple[str, str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–∑–∞–≥–æ–ª–æ–≤–æ–∫, –æ—Å—Ç–∞–≤—à–∏–π—Å—è_–∫–æ–Ω—Ç–µ–Ω—Ç)"""
    
    lines = content.strip().split('\n')
    title = None
    remaining_lines = lines
    
    # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö
    for i, line in enumerate(lines[:3]):
        line = line.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        if line.startswith('#'):
            # Markdown –∑–∞–≥–æ–ª–æ–≤–æ–∫
            title = re.sub(r'^#+\s*', '', line)
            remaining_lines = lines[i+1:]
            break
        elif line.startswith('**') and line.endswith('**'):
            # –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            title = line.strip('*')
            remaining_lines = lines[i+1:]
            break
        elif re.match(r'^\*\*–°–ª–∞–π–¥\s+\d+:', line):
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç "**–°–ª–∞–π–¥ X:"
            title = re.sub(r'^\*\*–°–ª–∞–π–¥\s+\d+:\s*', '', line).rstrip('*')
            remaining_lines = lines[i+1:]
            break
    
    if title:
        title = clean_title(title)
        remaining_content = '\n'.join(remaining_lines).strip()
        return title, remaining_content
    
    return None, content

def parse_markdown(text: str) -> List[SlideModel]:
    """–ü–∞—Ä—Å–∏—Ç Markdown —Ç–µ–∫—Å—Ç –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–∞–π–¥–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º
    parts = [p.strip() for p in SEPARATOR.split(text) if p.strip()]
    slides: List[SlideModel] = []
    
    for i, part in enumerate(parts):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        title, content = extract_title_from_content(part)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ HTML
        html = markdown.markdown(content)
        soup = BeautifulSoup(html, "html.parser")
        
        # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –≤ HTML
        if not title:
            title_el = soup.find(["h1", "h2", "h3", "strong"])
            if title_el:
                title = clean_title(title_el.get_text(strip=True))
                # –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–∑ soup, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
                title_el.decompose()
        
        # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π
        if not title:
            title = f"–°–ª–∞–π–¥ {i + 1}"
        
        blocks = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–∫–∏
        bullets = []
        for li in soup.find_all("li"):
            bullet_text = clean_text(li.get_text(strip=True))
            if bullet_text:
                bullets.append(bullet_text)
        
        if bullets:
            blocks.append(TextBlock(text="", bullets=bullets))
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
        for p in soup.find_all("p"):
            p_text = clean_text(p.get_text(strip=True))
            if p_text:
                blocks.append(TextBlock(text=p_text))
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for img in soup.find_all("img"):
            src = img.get("src", "")
            alt = img.get("alt", "")
            
            if src.startswith("http://") or src.startswith("https://"):
                try:
                    response = requests.get(src, timeout=10)
                    response.raise_for_status()
                    suffix = Path(src).suffix or ".img"
                    tmp = NamedTemporaryFile(delete=False, suffix=suffix)
                    tmp.write(response.content)
                    tmp.flush()
                    src = tmp.name
                except Exception as e:
                    print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {src}: {e}")
                    continue
            elif not Path(src).exists():
                print(f"‚ö†Ô∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {src}")
                continue
            
            blocks.append(ImageBlock(src=src, alt=alt))
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–∞–π–¥
        slide = SlideModel(title=title, blocks=blocks)
        slides.append(slide)
    
    return slides

def test_parser():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä"""
    
    from .fetcher import fetch_markdown
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ü–ê–†–°–ï–†–ê")
    print("=" * 50)
    
    try:
        gist_url = "https://gist.github.com/GunS82/21462de6ea445f8ec4a78130eb71ed0a"
        content = fetch_markdown(gist_url)
        
        print(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        slides = parse_markdown(content)
        
        print(f"üìã –°–æ–∑–¥–∞–Ω–æ —Å–ª–∞–π–¥–æ–≤: {len(slides)}")
        print()
        
        for i, slide in enumerate(slides[:5], 1):
            print(f"üìÑ –°–õ–ê–ô–î {i}:")
            print(f"   üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: '{slide.title}'")
            print(f"   üìä –ë–ª–æ–∫–æ–≤: {len(slide.blocks)}")
            
            for j, block in enumerate(slide.blocks[:2]):
                if isinstance(block, TextBlock):
                    if block.bullets:
                        print(f"   ‚Ä¢ –°–ø–∏—Å–æ–∫ –∏–∑ {len(block.bullets)} –ø—É–Ω–∫—Ç–æ–≤")
                        for bullet in block.bullets[:2]:
                            print(f"     - {bullet[:50]}{'...' if len(bullet) > 50 else ''}")
                    else:
                        print(f"   ‚Ä¢ –¢–µ–∫—Å—Ç: {block.text[:50]}{'...' if len(block.text) > 50 else ''}")
                elif isinstance(block, ImageBlock):
                    print(f"   ‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {block.alt or '–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}")
            
            if len(slide.blocks) > 2:
                print(f"   ... –∏ –µ—â—ë {len(slide.blocks) - 2} –±–ª–æ–∫–æ–≤")
            
            print()
        
        if len(slides) > 5:
            print(f"... –∏ –µ—â—ë {len(slides) - 5} —Å–ª–∞–π–¥–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_parser()