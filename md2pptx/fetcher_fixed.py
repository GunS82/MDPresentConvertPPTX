#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è fetcher.py —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Gist URL
"""

import os
import re
from pathlib import Path
from typing import Optional
from urllib.parse import urlparse

import requests
from dotenv import load_dotenv

load_dotenv()

GIST_RE = re.compile(r"^[0-9a-f]{20,}$")
GIST_URL_RE = re.compile(r"https://gist\.github\.com/[^/]+/([0-9a-f]{20,})")

def fetch_markdown(src: str) -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç Markdown –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    if src.startswith("http://") or src.startswith("https://"):
        return _fetch_from_url(src)
    elif GIST_RE.match(src):
        return _fetch_from_gist(src)
    else:
        path = Path(src)
        return path.read_text(encoding="utf-8")

def _fetch_from_url(url: str) -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ URL —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Gist —Å—Å—ã–ª–æ–∫"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ Gist URL
    gist_match = GIST_URL_RE.search(url)
    if gist_match:
        gist_id = gist_match.group(1)
        print(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω Gist URL, –∏–∑–≤–ª–µ–∫–∞–µ–º ID: {gist_id}")
        return _fetch_from_gist(gist_id)
    
    # –û–±—ã—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ URL
    response = requests.get(url)
    response.raise_for_status()
    return response.text

def _fetch_from_gist(gist_id: str) -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç Markdown —Ñ–∞–π–ª –∏–∑ GitHub Gist —á–µ—Ä–µ–∑ API"""
    
    print(f"üì° –ó–∞–≥—Ä—É–∂–∞–µ–º Gist —á–µ—Ä–µ–∑ API: {gist_id}")
    
    token = os.getenv("GITHUB_TOKEN")
    headers = {"Accept": "application/vnd.github.v3+json"}
    if token:
        headers["Authorization"] = f"token {token}"
        print("üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º GitHub —Ç–æ–∫–µ–Ω")
    else:
        print("‚ö†Ô∏è  GitHub —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø")
    
    api_url = f"https://api.github.com/gists/{gist_id}"
    
    try:
        response = requests.get(api_url, headers=headers)
        response.raise_for_status()
        gist = response.json()
        
        print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ Gist: {len(gist['files'])}")
        
        # –ò—â–µ–º Markdown —Ñ–∞–π–ª—ã
        markdown_files = []
        for filename, file_info in gist["files"].items():
            print(f"   - {filename} ({file_info.get('type', 'unknown type')})")
            if filename.endswith(".md") or file_info.get('type') == 'text/markdown':
                markdown_files.append((filename, file_info))
        
        if not markdown_files:
            # –ï—Å–ª–∏ –Ω–µ—Ç .md —Ñ–∞–π–ª–æ–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            for filename, file_info in gist["files"].items():
                if file_info.get('type', '').startswith('text/'):
                    markdown_files.append((filename, file_info))
                    print(f"üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∫–∞–∫ Markdown: {filename}")
                    break
        
        if not markdown_files:
            available_files = list(gist["files"].keys())
            raise ValueError(f"No markdown file found in gist. Available files: {available_files}")
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π Markdown —Ñ–∞–π–ª
        filename, file_info = markdown_files[0]
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª: {filename}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º raw –∫–æ–Ω—Ç–µ–Ω—Ç
        raw_url = file_info["raw_url"]
        print(f"üîó Raw URL: {raw_url}")
        
        raw_response = requests.get(raw_url)
        raw_response.raise_for_status()
        
        content = raw_response.text
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üìÑ –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {repr(content[:200])}")
        
        return content
        
    except requests.exceptions.RequestException as e:
        raise ValueError(f"Failed to fetch gist {gist_id}: {e}")
    except KeyError as e:
        raise ValueError(f"Invalid gist response format: {e}")

def test_gist_fetching():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ Gist"""
    
    gist_url = "https://gist.github.com/GunS82/21462de6ea445f8ec4a78130eb71ed0a"
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ì–†–£–ó–ö–ò GIST")
    print("=" * 50)
    
    try:
        content = fetch_markdown(gist_url)
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        print()
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
        separator_count = len(re.findall(r'^---$', content, re.MULTILINE))
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π '---': {separator_count}")
        
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Å–ª–∞–π–¥—ã
        SEPARATOR = re.compile(r"^---$", re.MULTILINE)
        parts = [p.strip() for p in SEPARATOR.split(content) if p.strip()]
        print(f"üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤: {len(parts)}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ —á–∞—Å—Ç–∏
        for i, part in enumerate(parts[:3]):
            print(f"\nüìÑ –°–õ–ê–ô–î {i+1}:")
            print("-" * 30)
            print(part[:300])
            if len(part) > 300:
                print("...")
        
        if len(parts) > 3:
            print(f"\n... –∏ –µ—â—ë {len(parts) - 3} —Å–ª–∞–π–¥–æ–≤")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_gist_fetching()