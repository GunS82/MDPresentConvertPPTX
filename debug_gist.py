#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ Markdown –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ Gist
"""

import re
from md2pptx.fetcher import fetch_markdown

def debug_gist_content():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Gist –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º —Å–ª–∞–π–¥–æ–≤"""
    
    gist_url = 'https://gist.github.com/GunS82/21462de6ea445f8ec4a78130eb71ed0a'
    
    print("üîç –ê–ù–ê–õ–ò–ó –ò–°–•–û–î–ù–û–ì–û MARKDOWN –ò–ó GIST")
    print("=" * 60)
    
    try:
        content = fetch_markdown(gist_url)
        print(f"üìä –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üìÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(content.splitlines())}")
        print()
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤
        print("üìù –ü–ï–†–í–´–ï 1000 –°–ò–ú–í–û–õ–û–í:")
        print("-" * 40)
        print(content[:1000])
        print("-" * 40)
        print()
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
        print("üîç –ê–ù–ê–õ–ò–ó –†–ê–ó–î–ï–õ–ò–¢–ï–õ–ï–ô –°–õ–ê–ô–î–û–í:")
        print("-" * 40)
        
        # –ü–æ–∏—Å–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
        separator_patterns = [
            (r'^---$', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (---)'),
            (r'^-{3,}$', '–¢—Ä–∏ –∏–ª–∏ –±–æ–ª–µ–µ –¥–µ—Ñ–∏—Å–æ–≤'),
            (r'---', '–õ—é–±—ã–µ —Ç—Ä–∏ –¥–µ—Ñ–∏—Å–∞'),
            (r'\n\n+', '–î–≤–æ–π–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫'),
        ]
        
        for pattern, description in separator_patterns:
            matches = re.findall(pattern, content, re.MULTILINE)
            parts = re.split(pattern, content, flags=re.MULTILINE)
            print(f"   {description}: –Ω–∞–π–¥–µ–Ω–æ {len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, {len(parts)} —á–∞—Å—Ç–µ–π")
        
        print()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∏–∑ –ø–∞—Ä—Å–µ—Ä–∞
        SEPARATOR = re.compile(r"^---$", re.MULTILINE)
        parts = [p.strip() for p in SEPARATOR.split(content) if p.strip()]
        
        print(f"üìã –†–ê–ó–î–ï–õ–ï–ù–ò–ï –ù–ê –°–õ–ê–ô–î–´ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º):")
        print(f"   –ù–∞–π–¥–µ–Ω–æ —á–∞—Å—Ç–µ–π: {len(parts)}")
        print()
        
        if len(parts) == 1:
            print("‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –í–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ø–∞–ª –≤ –æ–¥–∏–Ω —Å–ª–∞–π–¥!")
            print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ ---")
            print("   - –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ")
            print("   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π")
            print()
            
            # –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
            lines = content.splitlines()
            potential_separators = []
            for i, line in enumerate(lines):
                if '---' in line or line.strip() == '' and i > 0 and i < len(lines)-1:
                    potential_separators.append((i+1, repr(line)))
            
            if potential_separators:
                print("üîç –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –†–ê–ó–î–ï–õ–ò–¢–ï–õ–ò:")
                for line_num, line_content in potential_separators[:10]:
                    print(f"   –°—Ç—Ä–æ–∫–∞ {line_num}: {line_content}")
            print()
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π
        for i, part in enumerate(parts[:3]):
            print(f"üìÑ –ß–ê–°–¢–¨ {i+1} (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤):")
            print("-" * 30)
            print(part[:300])
            if len(part) > 300:
                print("...")
            print("-" * 30)
            print()
        
        if len(parts) > 3:
            print(f"... –∏ –µ—â—ë {len(parts) - 3} —á–∞—Å—Ç–µ–π")
            print()
        
        # –ê–Ω–∞–ª–∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        print("üìã –ê–ù–ê–õ–ò–ó –ó–ê–ì–û–õ–û–í–ö–û–í:")
        print("-" * 30)
        
        h1_count = len(re.findall(r'^# ', content, re.MULTILINE))
        h2_count = len(re.findall(r'^## ', content, re.MULTILINE))
        h3_count = len(re.findall(r'^### ', content, re.MULTILINE))
        
        print(f"   H1 –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {h1_count}")
        print(f"   H2 –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {h2_count}")
        print(f"   H3 –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {h3_count}")
        
        # –ù–∞–π—Ç–∏ –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = re.findall(r'^(#{1,6})\s+(.+)$', content, re.MULTILINE)
        if headers:
            print("\n   –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏:")
            for level, title in headers[:10]:
                print(f"   {level} {title}")
            if len(headers) > 10:
                print(f"   ... –∏ –µ—â—ë {len(headers) - 10} –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤")
        
        print()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    debug_gist_content()