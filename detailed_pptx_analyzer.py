#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ PPTX –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π
"""

import sys
from pathlib import Path
from pptx import Presentation
from pptx.enum.shapes import MSO_SHAPE_TYPE
import re

def analyze_presentation_quality(pptx_path: str):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏"""
    
    if not Path(pptx_path).exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pptx_path}")
        return
    
    try:
        prs = Presentation(pptx_path)
        
        print(f"üìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–ï–ó–ï–ù–¢–ê–¶–ò–ò: {Path(pptx_path).name}")
        print("=" * 70)
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        slide_count = len(prs.slides)
        print(f"üìÑ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤: {slide_count}")
        print(f"üìê –†–∞–∑–º–µ—Ä —Å–ª–∞–π–¥–æ–≤: {prs.slide_width} x {prs.slide_height} EMU")
        print()
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å–ª–∞–π–¥–∞
        issues = []
        total_text_length = 0
        total_images = 0
        slides_with_titles = 0
        slides_with_content = 0
        
        for i, slide in enumerate(prs.slides, 1):
            print(f"üìã –°–õ–ê–ô–î {i}:")
            print("-" * 40)
            
            # –ê–Ω–∞–ª–∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            title_text = ""
            if slide.shapes.title:
                title_text = slide.shapes.title.text.strip()
                if title_text:
                    slides_with_titles += 1
                    print(f"   üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: '{title_text[:60]}{'...' if len(title_text) > 60 else ''}'")
                else:
                    print(f"   ‚ö†Ô∏è  –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—É—Å—Ç–æ–π")
                    issues.append(f"–°–ª–∞–π–¥ {i}: –ø—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫")
            else:
                print(f"   ‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                issues.append(f"–°–ª–∞–π–¥ {i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫")
            
            # –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            text_shapes = 0
            image_shapes = 0
            other_shapes = 0
            slide_text_length = 0
            
            for shape in slide.shapes:
                if shape.shape_type == MSO_SHAPE_TYPE.TEXT_BOX or hasattr(shape, 'text_frame'):
                    if hasattr(shape, 'text') and shape.text.strip():
                        text_shapes += 1
                        slide_text_length += len(shape.text)
                        
                        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞
                        text_preview = shape.text.strip()[:100]
                        if '\n' in text_preview:
                            text_preview = text_preview.split('\n')[0] + '...'
                        print(f"   üìÑ –¢–µ–∫—Å—Ç: '{text_preview}{'...' if len(shape.text) > 100 else ''}'")
                        
                elif shape.shape_type == MSO_SHAPE_TYPE.PICTURE:
                    image_shapes += 1
                    print(f"   üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ")
                else:
                    other_shapes += 1
            
            total_text_length += slide_text_length
            total_images += image_shapes
            
            if text_shapes > 0 or image_shapes > 0:
                slides_with_content += 1
            
            print(f"   üìä –û–±—ä–µ–∫—Ç—ã: {text_shapes} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö, {image_shapes} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, {other_shapes} –¥—Ä—É–≥–∏—Ö")
            print(f"   üìù –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {slide_text_length} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã
            if text_shapes == 0 and image_shapes == 0:
                print(f"   ‚ö†Ô∏è  –°–ª–∞–π–¥ –ø—É—Å—Ç–æ–π (–Ω–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ)")
                issues.append(f"–°–ª–∞–π–¥ {i}: –ø—É—Å—Ç–æ–π —Å–ª–∞–π–¥")
            
            if slide_text_length > 1000:
                print(f"   ‚ö†Ô∏è  –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ({slide_text_length} —Å–∏–º–≤–æ–ª–æ–≤)")
                issues.append(f"–°–ª–∞–π–¥ {i}: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            if '**–°–ª–∞–π–¥' in title_text:
                print(f"   ‚ö†Ô∏è  –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
                issues.append(f"–°–ª–∞–π–¥ {i}: –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
            
            print()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("=" * 40)
        print(f"üìÑ –°–ª–∞–π–¥–æ–≤ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏: {slides_with_titles}/{slide_count} ({slides_with_titles/slide_count*100:.1f}%)")
        print(f"üìã –°–ª–∞–π–¥–æ–≤ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º: {slides_with_content}/{slide_count} ({slides_with_content/slide_count*100:.1f}%)")
        print(f"üìù –û–±—â–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {total_text_length} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üñºÔ∏è  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_images}")
        print(f"üìä –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å–ª–∞–π–¥: {total_text_length/slide_count:.1f} —Å–∏–º–≤–æ–ª–æ–≤")
        print()
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
        print("üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú:")
        print("=" * 40)
        
        if not issues:
            print("‚úÖ –°–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        else:
            print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(issues)}")
            for issue in issues:
                print(f"   ‚Ä¢ {issue}")
        
        print()
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        print("üéØ –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê:")
        print("=" * 40)
        
        quality_score = 100
        
        # –®—Ç—Ä–∞—Ñ—ã –∑–∞ –ø—Ä–æ–±–ª–µ–º—ã
        if slides_with_titles < slide_count * 0.8:
            quality_score -= 20
            print("‚ùå –ú–Ω–æ–≥–∏–µ —Å–ª–∞–π–¥—ã –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (-20 –±–∞–ª–ª–æ–≤)")
        
        if slides_with_content < slide_count * 0.9:
            quality_score -= 15
            print("‚ùå –ï—Å—Ç—å –ø—É—Å—Ç—ã–µ —Å–ª–∞–π–¥—ã (-15 –±–∞–ª–ª–æ–≤)")
        
        if total_text_length < 100:
            quality_score -= 25
            print("‚ùå –°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞ (-25 –±–∞–ª–ª–æ–≤)")
        
        if len(issues) > slide_count * 0.3:
            quality_score -= 20
            print("‚ùå –ú–Ω–æ–≥–æ –ø—Ä–æ–±–ª–µ–º —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º (-20 –±–∞–ª–ª–æ–≤)")
        
        if total_images == 0 and slide_count > 3:
            quality_score -= 10
            print("‚ö†Ô∏è  –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (-10 –±–∞–ª–ª–æ–≤)")
        
        # –ë–æ–Ω—É—Å—ã
        if slides_with_titles == slide_count:
            quality_score += 5
            print("‚úÖ –í—Å–µ —Å–ª–∞–π–¥—ã –∏–º–µ—é—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ (+5 –±–∞–ª–ª–æ–≤)")
        
        if total_images > 0:
            quality_score += 5
            print("‚úÖ –ï—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (+5 –±–∞–ª–ª–æ–≤)")
        
        quality_score = max(0, min(100, quality_score))
        
        print(f"\nüèÜ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê: {quality_score}/100")
        
        if quality_score >= 80:
            print("‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏")
        elif quality_score >= 60:
            print("üëç –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏")
        elif quality_score >= 40:
            print("‚ö†Ô∏è  –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã")
        else:
            print("‚ùå –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
        
        print()
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("=" * 40)
        
        if slides_with_titles < slide_count:
            print("‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ –≤—Å–µ–º —Å–ª–∞–π–¥–∞–º")
        
        if slides_with_content < slide_count:
            print("‚Ä¢ –£–¥–∞–ª–∏—Ç–µ –ø—É—Å—Ç—ã–µ —Å–ª–∞–π–¥—ã –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –∫ –Ω–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ")
        
        if total_text_length < 500:
            print("‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
        
        if total_images == 0:
            print("‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        if any('–º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é' in issue for issue in issues):
            print("‚Ä¢ –û—á–∏—Å—Ç–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç —Å–ª—É–∂–µ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        
        if not issues and quality_score >= 80:
            print("‚Ä¢ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        import traceback
        traceback.print_exc()

def compare_presentations(old_path: str, new_path: str):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏"""
    
    print("üîÑ –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–ï–ó–ï–ù–¢–ê–¶–ò–ô")
    print("=" * 50)
    
    try:
        old_prs = Presentation(old_path) if Path(old_path).exists() else None
        new_prs = Presentation(new_path) if Path(new_path).exists() else None
        
        if not old_prs:
            print(f"‚ùå –°—Ç–∞—Ä–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {old_path}")
            return
        
        if not new_prs:
            print(f"‚ùå –ù–æ–≤–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {new_path}")
            return
        
        old_slides = len(old_prs.slides)
        new_slides = len(new_prs.slides)
        
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤: {old_slides} ‚Üí {new_slides} ({new_slides - old_slides:+d})")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        old_text_total = 0
        new_text_total = 0
        
        for slide in old_prs.slides:
            for shape in slide.shapes:
                if hasattr(shape, 'text'):
                    old_text_total += len(shape.text)
        
        for slide in new_prs.slides:
            for shape in slide.shapes:
                if hasattr(shape, 'text'):
                    new_text_total += len(shape.text)
        
        print(f"üìù –û–±—â–∏–π –æ–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞: {old_text_total} ‚Üí {new_text_total} ({new_text_total - old_text_total:+d})")
        
        if new_slides > old_slides:
            print("‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ: –±–æ–ª—å—à–µ —Å–ª–∞–π–¥–æ–≤")
        elif new_slides < old_slides:
            print("‚ö†Ô∏è  –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–∞–π–¥–æ–≤")
        
        if new_text_total > old_text_total:
            print("‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ: –±–æ–ª—å—à–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏: {e}")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python detailed_pptx_analyzer.py <—Ñ–∞–π–ª.pptx> [—Å—Ç–∞—Ä—ã–π_—Ñ–∞–π–ª.pptx]")
        sys.exit(1)
    
    pptx_file = sys.argv[1]
    
    if len(sys.argv) >= 3:
        old_file = sys.argv[2]
        compare_presentations(old_file, pptx_file)
        print()
    
    analyze_presentation_quality(pptx_file)